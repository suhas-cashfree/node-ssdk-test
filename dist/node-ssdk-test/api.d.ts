/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we\'ve switched to the design first approach! You can now help us improve the API whether it\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you\'re looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     *
     * @type {string}
     * @memberof Address
     */
    'street'?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    'city'?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    'state'?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    'zip'?: string;
}
/**
 *
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     *
     * @type {number}
     * @memberof ApiResponse
     */
    'code'?: number;
    /**
     *
     * @type {string}
     * @memberof ApiResponse
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof ApiResponse
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface Category
 */
export interface Category {
    /**
     *
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Category
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     *
     * @type {number}
     * @memberof Customer
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'username'?: string;
    /**
     *
     * @type {Array<Address>}
     * @memberof Customer
     */
    'address'?: Array<Address>;
}
/**
 *
 * @export
 * @interface Order
 */
export interface Order {
    /**
     *
     * @type {number}
     * @memberof Order
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    'petId'?: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    'quantity'?: number;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    'shipDate'?: string;
    /**
     * Order Status
     * @type {string}
     * @memberof Order
     */
    'status'?: OrderStatusEnum;
    /**
     *
     * @type {boolean}
     * @memberof Order
     */
    'complete'?: boolean;
}
export declare const OrderStatusEnum: {
    readonly Placed: "placed";
    readonly Approved: "approved";
    readonly Delivered: "delivered";
};
export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];
/**
 *
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     *
     * @type {number}
     * @memberof Pet
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Pet
     */
    'name': string;
    /**
     *
     * @type {Category}
     * @memberof Pet
     */
    'category'?: Category;
    /**
     *
     * @type {Array<string>}
     * @memberof Pet
     */
    'photoUrls': Array<string>;
    /**
     *
     * @type {Array<Tag>}
     * @memberof Pet
     */
    'tags'?: Array<Tag>;
    /**
     * pet status in the store
     * @type {string}
     * @memberof Pet
     */
    'status'?: PetStatusEnum;
}
export declare const PetStatusEnum: {
    readonly Available: "available";
    readonly Pending: "pending";
    readonly Sold: "sold";
};
export type PetStatusEnum = typeof PetStatusEnum[keyof typeof PetStatusEnum];
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {number}
     * @memberof Tag
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'password'?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'phone'?: string;
    /**
     * User Status
     * @type {number}
     * @memberof User
     */
    'userStatus'?: number;
}
/**
 * PetApi - axios parameter creator
 * @export
 */
export declare const PetApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add a new pet to the store
     * @summary Add a new pet to the store
     * @param {Pet} pet Create a new pet in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPet: (pet: Pet, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * delete a pet
     * @summary Deletes a pet
     * @param {number} pet_id Pet id to delete
     * @param {string} [api_key]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePet: (pet_id: number, api_key?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param {FindPetsByStatusStatusEnum} [status] Status values that need to be considered for filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPetsByStatus: (status?: FindPetsByStatusStatusEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param {Array<string>} [tags] Tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPetsByTags: (tags?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param {number} pet_id ID of pet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPetById: (pet_id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing pet by Id
     * @summary Update an existing pet
     * @param {Pet} pet Update an existent pet in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePet: (pet: Pet, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a pet in the store with form data
     * @param {number} pet_id ID of pet that needs to be updated
     * @param {string} [name] Name of pet that needs to be updated
     * @param {string} [status] Status of pet that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePetWithForm: (pet_id: number, name?: string, status?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary uploads an image
     * @param {number} pet_id ID of pet to update
     * @param {string} [additional_metadata] Additional Metadata
     * @param {File} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile: (pet_id: number, additional_metadata?: string, body?: File, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PetApi - functional programming interface
 * @export
 */
export declare const PetApiFp: (configuration?: Configuration) => {
    /**
     * Add a new pet to the store
     * @summary Add a new pet to the store
     * @param {Pet} pet Create a new pet in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPet(pet: Pet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>>;
    /**
     * delete a pet
     * @summary Deletes a pet
     * @param {number} pet_id Pet id to delete
     * @param {string} [api_key]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePet(pet_id: number, api_key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param {FindPetsByStatusStatusEnum} [status] Status values that need to be considered for filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPetsByStatus(status?: FindPetsByStatusStatusEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>>;
    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param {Array<string>} [tags] Tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPetsByTags(tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>>;
    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param {number} pet_id ID of pet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPetById(pet_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>>;
    /**
     * Update an existing pet by Id
     * @summary Update an existing pet
     * @param {Pet} pet Update an existent pet in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePet(pet: Pet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>>;
    /**
     *
     * @summary Updates a pet in the store with form data
     * @param {number} pet_id ID of pet that needs to be updated
     * @param {string} [name] Name of pet that needs to be updated
     * @param {string} [status] Status of pet that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePetWithForm(pet_id: number, name?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary uploads an image
     * @param {number} pet_id ID of pet to update
     * @param {string} [additional_metadata] Additional Metadata
     * @param {File} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(pet_id: number, additional_metadata?: string, body?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
};
/**
 * PetApi - factory interface
 * @export
 */
export declare const PetApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add a new pet to the store
     * @summary Add a new pet to the store
     * @param {Pet} pet Create a new pet in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPet(pet: Pet, options?: any): AxiosPromise<Pet>;
    /**
     * delete a pet
     * @summary Deletes a pet
     * @param {number} pet_id Pet id to delete
     * @param {string} [api_key]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePet(pet_id: number, api_key?: string, options?: any): AxiosPromise<void>;
    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param {FindPetsByStatusStatusEnum} [status] Status values that need to be considered for filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPetsByStatus(status?: FindPetsByStatusStatusEnum, options?: any): AxiosPromise<Array<Pet>>;
    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param {Array<string>} [tags] Tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPetsByTags(tags?: Array<string>, options?: any): AxiosPromise<Array<Pet>>;
    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param {number} pet_id ID of pet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPetById(pet_id: number, options?: any): AxiosPromise<Pet>;
    /**
     * Update an existing pet by Id
     * @summary Update an existing pet
     * @param {Pet} pet Update an existent pet in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePet(pet: Pet, options?: any): AxiosPromise<Pet>;
    /**
     *
     * @summary Updates a pet in the store with form data
     * @param {number} pet_id ID of pet that needs to be updated
     * @param {string} [name] Name of pet that needs to be updated
     * @param {string} [status] Status of pet that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePetWithForm(pet_id: number, name?: string, status?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary uploads an image
     * @param {number} pet_id ID of pet to update
     * @param {string} [additional_metadata] Additional Metadata
     * @param {File} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(pet_id: number, additional_metadata?: string, body?: File, options?: any): AxiosPromise<ApiResponse>;
};
/**
 * PetApi - object-oriented interface
 * @export
 * @class PetApi
 * @extends {BaseAPI}
 */
export declare class PetApi extends BaseAPI {
    /**
     * Add a new pet to the store
     * @summary Add a new pet to the store
     * @param {Pet} pet Create a new pet in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    addPet(pet: Pet, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Pet, any>>;
    /**
     * delete a pet
     * @summary Deletes a pet
     * @param {number} pet_id Pet id to delete
     * @param {string} [api_key]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    deletePet(pet_id: number, api_key?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Multiple status values can be provided with comma separated strings
     * @summary Finds Pets by status
     * @param {FindPetsByStatusStatusEnum} [status] Status values that need to be considered for filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    findPetsByStatus(status?: FindPetsByStatusStatusEnum, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Pet[], any>>;
    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @summary Finds Pets by tags
     * @param {Array<string>} [tags] Tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    findPetsByTags(tags?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Pet[], any>>;
    /**
     * Returns a single pet
     * @summary Find pet by ID
     * @param {number} pet_id ID of pet to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    getPetById(pet_id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Pet, any>>;
    /**
     * Update an existing pet by Id
     * @summary Update an existing pet
     * @param {Pet} pet Update an existent pet in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    updatePet(pet: Pet, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Pet, any>>;
    /**
     *
     * @summary Updates a pet in the store with form data
     * @param {number} pet_id ID of pet that needs to be updated
     * @param {string} [name] Name of pet that needs to be updated
     * @param {string} [status] Status of pet that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    updatePetWithForm(pet_id: number, name?: string, status?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary uploads an image
     * @param {number} pet_id ID of pet to update
     * @param {string} [additional_metadata] Additional Metadata
     * @param {File} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    uploadFile(pet_id: number, additional_metadata?: string, body?: File, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiResponse, any>>;
}
/**
 * @export
 */
export declare const FindPetsByStatusStatusEnum: {
    readonly Available: "available";
    readonly Pending: "pending";
    readonly Sold: "sold";
};
export type FindPetsByStatusStatusEnum = typeof FindPetsByStatusStatusEnum[keyof typeof FindPetsByStatusStatusEnum];
/**
 * StoreApi - axios parameter creator
 * @export
 */
export declare const StoreApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * @summary Delete purchase order by ID
     * @param {number} order_id ID of the order that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrder: (order_id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     * @summary Find purchase order by ID
     * @param {number} order_id ID of order that needs to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById: (order_id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Place a new order in the store
     * @summary Place an order for a pet
     * @param {Order} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    placeOrder: (order?: Order, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StoreApi - functional programming interface
 * @export
 */
export declare const StoreApiFp: (configuration?: Configuration) => {
    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * @summary Delete purchase order by ID
     * @param {number} order_id ID of the order that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrder(order_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: number;
    }>>;
    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     * @summary Find purchase order by ID
     * @param {number} order_id ID of order that needs to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById(order_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>>;
    /**
     * Place a new order in the store
     * @summary Place an order for a pet
     * @param {Order} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    placeOrder(order?: Order, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>>;
};
/**
 * StoreApi - factory interface
 * @export
 */
export declare const StoreApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * @summary Delete purchase order by ID
     * @param {number} order_id ID of the order that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrder(order_id: number, options?: any): AxiosPromise<void>;
    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory(options?: any): AxiosPromise<{
        [key: string]: number;
    }>;
    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     * @summary Find purchase order by ID
     * @param {number} order_id ID of order that needs to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById(order_id: number, options?: any): AxiosPromise<Order>;
    /**
     * Place a new order in the store
     * @summary Place an order for a pet
     * @param {Order} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    placeOrder(order?: Order, options?: any): AxiosPromise<Order>;
};
/**
 * StoreApi - object-oriented interface
 * @export
 * @class StoreApi
 * @extends {BaseAPI}
 */
export declare class StoreApi extends BaseAPI {
    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * @summary Delete purchase order by ID
     * @param {number} order_id ID of the order that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    deleteOrder(order_id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    getInventory(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: number;
    }, any>>;
    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     * @summary Find purchase order by ID
     * @param {number} order_id ID of order that needs to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    getOrderById(order_id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Order, any>>;
    /**
     * Place a new order in the store
     * @summary Place an order for a pet
     * @param {Order} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    placeOrder(order?: Order, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Order, any>>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param {User} [user] Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (user?: User, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates list of users with given input array
     * @summary Creates list of users with given input array
     * @param {Array<User>} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUsersWithListInput: (user?: Array<User>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {string} username The name that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user by user name
     * @param {string} username The name that needs to be fetched. Use user1 for testing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByName: (username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Logs user into the system
     * @param {string} [username] The user name for login
     * @param {string} [password] The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser: (username?: string, password?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This can only be done by the logged in user.
     * @summary Update user
     * @param {string} username name that need to be deleted
     * @param {User} [user] Update an existent user in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (username: string, user?: User, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param {User} [user] Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Creates list of users with given input array
     * @summary Creates list of users with given input array
     * @param {Array<User>} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUsersWithListInput(user?: Array<User>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {string} username The name that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get user by user name
     * @param {string} username The name that needs to be fetched. Use user1 for testing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByName(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Logs user into the system
     * @param {string} [username] The user name for login
     * @param {string} [password] The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser(username?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This can only be done by the logged in user.
     * @summary Update user
     * @param {string} username name that need to be deleted
     * @param {User} [user] Update an existent user in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(username: string, user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param {User} [user] Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(user?: User, options?: any): AxiosPromise<User>;
    /**
     * Creates list of users with given input array
     * @summary Creates list of users with given input array
     * @param {Array<User>} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUsersWithListInput(user?: Array<User>, options?: any): AxiosPromise<User>;
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {string} username The name that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(username: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get user by user name
     * @param {string} username The name that needs to be fetched. Use user1 for testing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByName(username: string, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Logs user into the system
     * @param {string} [username] The user name for login
     * @param {string} [password] The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser(username?: string, password?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser(options?: any): AxiosPromise<void>;
    /**
     * This can only be done by the logged in user.
     * @summary Update user
     * @param {string} username name that need to be deleted
     * @param {User} [user] Update an existent user in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(username: string, user?: User, options?: any): AxiosPromise<void>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param {User} [user] Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    createUser(user?: User, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * Creates list of users with given input array
     * @summary Creates list of users with given input array
     * @param {Array<User>} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    createUsersWithListInput(user?: Array<User>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {string} username The name that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    deleteUser(username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get user by user name
     * @param {string} username The name that needs to be fetched. Use user1 for testing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserByName(username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @summary Logs user into the system
     * @param {string} [username] The user name for login
     * @param {string} [password] The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    loginUser(username?: string, password?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    logoutUser(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This can only be done by the logged in user.
     * @summary Update user
     * @param {string} username name that need to be deleted
     * @param {User} [user] Update an existent user in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateUser(username: string, user?: User, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
